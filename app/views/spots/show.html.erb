<% if @spot.photo_url.attached? %>
    <%= cl_image_tag @spot.photo_url.key, class: "show-spot-background" %>
  <% end %>

  <%= link_to spots_path do %>
    <div class="round-button">
      <div class="circle-back">
      </div>
      <svg width="10" height="17" viewBox="0 0 10 17" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 16L1 8.5L9 1" stroke="#4F3A57" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </div>
  <% end %>

  <ul>
    <% @spot.reviews.each do |review| %>
      <li><%= review.rating %></li>
      <li><%= review.comment %></li>
    <% end %>
  </ul>

<h1><%= @spot.address %></h1>
<h2><%= @spot.spot_difficulty %></h2>

<div id="reviews-average" data-average-review="<%= @average_rating %>">
  <% for num in (1..5) %>
    <i class="fa-<%= (num > @average_rating) ? 'regular' : 'solid' %> fa-star"></i>
  <% end %>
</div>

  <% if @bookmark.first %>
    <%= link_to 'bookmark d', spot_bookmark_path(@spot.id), data: {turbo_method: :delete} %>
  <% else @bookmark == nil %>
    <%= link_to 'bookmark c', spot_bookmarks_path(@spot.id), data: {turbo_method: :post} %>
  <% end %>


  <br><br>
  <%= link_to 'index', spots_path %>
  <%= link_to 'itinéraire (pas fait)', spots_path %>

  <ul>
    <% @spot.moves.each do |move| %>
      <li><%= move.name %></li>
    <% end %>
  </ul>

  <div id="habillage1">
  <h1 style="margin: 1.5rem auto;"><%= @spot.address %></h1>

    <div class="choices">
    <div class="square-button"></div>
    <div class="square-button"></div>
    <div class="square-button"></div>
  </div>


  <h2><%= @spot.spot_difficulty %></h2>
  </div>

Quand on clic sur le btn Bookmark
-> Cela crée une instance de Bookmark
--> Mon spot_id doit etre relié au user_id qui LUI est associé au current_user
---> Mon spot_id de bookmark doit être relié au spot_it de la show du spot dans lequel je suis

<div class="review">
  <h2>laisse une évalutation</h2>
  <%= simple_form_for [@spot, @review] do |f| %>
    <%= f.input :rating, as: :hidden %>
    <div class="my-3" id="review-star-ratings">
      <% Review::AUTHORIZED_RATINGS.each do |index| %>
        <i id="<%= index %>" class="review-rating fa-regular fa-star"></i>
      <% end %>
    </div>
    <%= f.submit class: "btn btn-primary", value: "Valider", id:"submit-star" %>
  <% end %>
</div>



<script>
// je créé une fonction qui va changer la classe appliquée aux étoiles
var toggleColorStars = (stars, rating) => {
  stars.forEach((star) => {
    if (star.id <= rating) {
      star.className = "review-rating fa-solid fa-star"
    } else {
      star.className = "review-rating fa-regular fa-star"
    }
  });
};

// je créé une fonction qui va récupérer la valeur du rating
var updateRatingInputForm = (rating) => {
  const formInput = document.getElementById('review_rating')
  formInput.value = rating
}

// je créé une fonction qui va appeler les deux premières fonctions
var dynamicRating = () => {
  // je récupère toutes les étoiles
  const stars = document.querySelectorAll('.review-rating');
  const starsReview = document.querySelector('#review-star-ratings');


  if ( stars.length > 0) {
    stars.forEach((star) => {
      // au clic je récupère la valeur du rating, j'applique le style css et j'ajoute une classe "selected" sur l'étoile
      star.addEventListener("click", (event) => {
        const rating = event.currentTarget.id
        updateRatingInputForm(rating);
        toggleColorStars(stars, rating);
        star.classList.add("selected")
      });
      star.addEventListener("mouseover", (event) => {
        // s'il n'y a pas de classe "selected" j'applique du style au passage de la souris
        const rating = event.currentTarget.id
        if (!(document.querySelector(".selected"))) {
          toggleColorStars(stars, rating);
        }
      });
    });
    starsReview.addEventListener("mouseout", (event) => {
      if (!(document.querySelector(".selected"))) {
        stars.forEach((star) => {
          star.className = "review-rating fa-regular fa-star"
        });
      }
    });
  };
};
var average = document.querySelector("#reviews-average")
var button = document.querySelector("#submit-star")
button.addEventListener( "click", (event) => {
  console.log(average.dataset.averageReview);
  average.innerHTML = `<p>Moyenne: ${average.dataset.averageReview}</p>`
})
// export { dynamicRating };
dynamicRating();
</script>
